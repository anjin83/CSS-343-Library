1. Describe the state of your program, exactly what works and what does not work:
The current state of our program is that it compiles, populates the library correctly, populates the Users correctly and processes the command file correctly. Invalid characters read from the text files are correctly ignored and duplicate commands are also ignored. It may not be pretty, but as far as I can tell everything is "working".
2. List your hash tables and briefly explain what they are used for and the file they are found in:
I use hash tables in three different classes: CommandFactory, Publisher, and in BookLibrary. CommandFactory and Publisher just hash the char read from the text files into an integer representation to access and create Books and Commands from the factories. BookLibrary uses the User's ID as the index for the array that store the User objects. We were unable to implement our idea of hashing the Book objects for instant lookup. 
3. State which file and which function you read the book data and how it gets into your book collection:
The Librarian class reads the book data and creates and inserts the Books in Librarian.cpp. the buildLibrary method reads the data4books text file line by line and creates and processes the books there. It reads the first character of the line and checks if it is a valid char by passing it to the Publisher class. the Publisher class is the factory for the Books. It hashes the char and checks to see if there is a Book object stored in the BookFactory array. If there is it returns an empty book of that type, if not it returns NULL and the buildLibrary method moves on to the next line. If a valid char was read and an empty Book was returned the method reads the rest of the line into a string and passes it to the Book to process. The Book object then splits the string up into it's data members and assigns them. After the Book's data members are set the Book is passed to the BookLibrary class which hashes the Book by type to determine which tree to store it in. After that the Book is inserted into the correct tree by the BookTree class.
4. State which file  and which function you read the command data from and how/where you perform your command
The Librarian class reads the command data and creates Command objects through the CommandFactory class. The processCommands methods reads the text file line by line, starting with the first char. It reads this char and passes it to the CommandFactory through the CommandFactory's createCommand method. The createCommand method hashes the char to see if it is associated with a valid command and if it is returns that Command object to the Librarian class. The processCommands method then reads the user ID and gets the User associated with that ID if they exist. After that it creates a temporary Book object using the rest of the information in the line. After it has the Command, the User and a temporary Book object it processes the command using the Command objects perform method.
5. Describe any dirty little secrets, if you feel they do not violate the open-close principle explain why:
Well, first of all we have no classes for adding books and users. These methods are handled by the Librarian handing these objects to the BookLibrary. We also have no class for printing out the contents of the library of the User's history, these methods are handled by the BookTree and BookList classes respectively. Lastly we use a switch case in the BookTree's printSortedBooks method to print the header when outputting each book types items. We also have memory leaks that we were unable to get rid of before the deadline. If we had more time we would fix these issues first.
6. Describe anything you are particularly proud of:
That it compiles and appears to be working correctly!